1751625052s:18252:"<!DOCTYPE html>
<html lang="ru">
<head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <meta name="referrer" content="same-origin"> <meta name="content-type" content="text/html; charset=UTF-8"> <!-- Предзагрузка критических ресурсов --> <link rel="preconnect" href="https://fonts.googleapis.com"> <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin> <link rel="dns-prefetch" href="https://fonts.googleapis.com"> <style> * { box-sizing: border-box; } body { margin: 0; padding: 20px; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; line-height: 1.6; -webkit-font-smoothing: antialiased; text-rendering: optimizeLegibility; contain: layout style paint; } img { max-width: 100%; height: auto; content-visibility: auto; loading: lazy; will-change: transform; } /* Оптимизация CSS рендеринга */ .editable-element { will-change: contents; transform: translateZ(0); } /* Скрываем скроллбары */ ::-webkit-scrollbar { width: 0px; background: transparent; } /* Убираем выделение */ * { -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } </style>
</head>
<body data-instant-allow-query-string><!DOCTYPE html> <html lang="ru"> <head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>Тестовый редактируемый шаблон</title> <style> body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; line-height: 1.6; } .header { text-align: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 40px 20px; border-radius: 10px; margin-bottom: 30px; } .content-section { margin-bottom: 30px; } .feature-box { border: 1px solid #ddd; border-radius: 8px; padding: 20px; margin-bottom: 20px; background: #f9f9f9; } .cta-button { display: inline-block; background: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; text-align: center; } .footer { text-align: center; padding: 20px; background: #f8f9fa; border-radius: 8px; } img { max-width: 100%; height: auto; border-radius: 8px; } /* Стили для блока серии */ .series-container { border: 2px dashed #764ba2; border-radius: 8px; padding: 20px; margin: 30px 0; background-color: #f5f5ff; position: relative; } .series-badge { position: absolute; top: -15px; left: 20px; background: #764ba2; color: white; padding: 5px 15px; border-radius: 20px; font-weight: bold; font-size: 14px; } .series-counter { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; background: white; padding: 10px; border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); } .series-progress { height: 10px; background: #e0e0e0; border-radius: 5px; width: 70%; overflow: hidden; } .series-progress-bar { height: 100%; background: linear-gradient(90deg, #667eea, #764ba2); border-radius: 5px; width: 0%; /* Будет обновляться через JavaScript */ } .series-info { display: flex; flex-direction: column; gap: 5px; margin-bottom: 10px; } .series-action { text-align: center; margin-top: 15px; } /* Стили для режима создания серии */ .series-editor-mode .form-group { margin-bottom: 15px; } .series-editor-mode label { display: block; margin-bottom: 5px; font-weight: 500; color: #333; } .series-editor-mode input, .series-editor-mode textarea { width: 100%; padding: 8px 12px; border: 1px solid #ccc; border-radius: 4px; background-color: white; color: #333; font-size: 14px; } .series-editor-mode textarea { min-height: 80px; resize: vertical; } .series-editor-mode .series-form-title { margin-bottom: 20px; font-size: 16px; font-weight: bold; color: #764ba2; } /* Стили для публичного режима серии */ .series-public-mode .series-status { font-weight: bold; color: #764ba2; margin-bottom: 10px; } .series-public-mode .series-limited-badge { display: inline-block; background-color: #764ba2; color: white; padding: 3px 8px; border-radius: 4px; font-size: 12px; margin-left: 10px; } </style> </head> <body> <div class="header"> <h1 data-editable="main_title" data-field-name="Главный заголовок" data-field-type="text">Добро пожаловать!</h1> <p data-editable="header_subtitle" data-field-name="Подзаголовок" data-field-type="text">Это ваш новый удивительный проект</p> </div> <!-- Блок для серии шаблонов с двумя режимами отображения --> <div class="series-container" data-series-id="series_data" data-series-config> <div class="series-badge">Серия</div> <!-- Режим редактирования (для страницы создания шаблона) --> <div class="series-editor-mode" data-mode="editor"> <div class="series-form-title">Настройки серии шаблона</div> <div class="form-group"> <label for="seriesTotalInput">Всего копий</label> <input type="number" id="seriesTotalInput" data-editable="series_total" data-field-name="Всего копий" data-field-type="number" min="1" max="1000" step="1" value="100"> </div> </div> <!-- Публичный режим (для отображения пользователям) --> <div class="series-public-mode" data-mode="public"> <div class="series-counter"> <div class="series-progress"> <div class="series-progress-bar" id="seriesProgressBar"></div> </div> <div data-series-total>100</div> </div> </div> </div> <div class="content-section"> <img data-editable="hero_image" data-field-name="Главное изображение" data-field-type="image" src="https://via.placeholder.com/800x400/667eea/ffffff?text=Ваше+изображение" alt="Главное изображение"> </div> <div class="content-section"> <h2 data-editable="section_title" data-field-name="Заголовок секции" data-field-type="text">О нашем проекте</h2> <p data-editable="description_text" data-field-name="Описание проекта" data-field-type="textarea"> Здесь вы можете рассказать о своем проекте, его особенностях и преимуществах. Этот текст можно легко изменить через редактор. </p> </div> <div class="feature-box"> <h3 data-editable="feature_title" data-field-name="Заголовок особенности" data-field-type="text">Главная особенность</h3> <p data-editable="feature_description" data-field-name="Описание особенности" data-field-type="text"> Опишите здесь главную особенность вашего продукта или услуги. </p> <img data-editable="feature_image" data-field-name="Изображение особенности" data-field-type="image" src="https://via.placeholder.com/400x200/764ba2/ffffff?text=Особенность" alt="Изображение особенности"> </div> <div class="content-section" style="text-align: center;"> <a href="#" data-editable="cta_link" data-field-name="Призыв к действию" data-field-type="link" class="cta-button"> <span data-editable="cta_text" data-field-name="Текст кнопки" data-field-type="text">Начать сейчас</span> </a> </div> <div class="footer"> <p data-editable="footer_text" data-field-name="Текст в подвале" data-field-type="text"> © 2025 Ваша компания. Все права защищены. </p> <p> Контакты: <a href="mailto:info@example.com" data-editable="contact_email" data-field-name="Email для связи" data-field-type="email">info@example.com</a> | <a href="tel:+7999999999" data-editable="contact_phone" data-field-name="Телефон" data-field-type="tel">+7 (999) 999-99-99</a> </p> </div> <!-- Скрипт для работы с серией --> <script> // Принудительно инициализируем режим редактирования для страниц создания/редактирования if (window !== window.parent) { console.log('Шаблон загружен в iframe - предполагаем режим редактирования'); // Предварительно инициализируем блок серии const editorMode = document.querySelector('.series-editor-mode'); const publicMode = document.querySelector('.series-public-mode'); if (editorMode) { editorMode.style.display = 'block'; console.log('Блок редактирования серии активирован (предварительно)'); } if (publicMode) { publicMode.style.display = 'none'; console.log('Публичный блок серии скрыт (предварительно)'); } } document.addEventListener('DOMContentLoaded', function() { // Определяем текущий режим (редактирование или просмотр) function detectMode() { try { // Проверяем URL для определения текущей страницы const currentUrl = window.location.href; const parentUrl = window.parent ? (window.parent.location.href || '') : ''; // Проверяем, находимся ли мы на странице создания/редактирования const isCreationPage = currentUrl.includes('/templates/create') || currentUrl.includes('/edit') || parentUrl.includes('/templates/create') || parentUrl.includes('/edit') || // Дополнительно проверяем наличие iframe на странице создания (window !== window.parent); console.log('Определение режима: текущий URL =', currentUrl); console.log('Определение режима: родительский URL =', parentUrl); console.log('Определение режима: страница создания =', isCreationPage); return isCreationPage ? 'editor' : 'public'; } catch (e) { console.warn('Ошибка при определении режима:', e); return 'public'; // По умолчанию публичный режим } } // Переключение между режимами отображения function switchMode(mode) { const editorMode = document.querySelector('.series-editor-mode'); const publicMode = document.querySelector('.series-public-mode'); console.log('Переключение режима на:', mode, 'editorMode=', editorMode, 'publicMode=', publicMode); if (mode === 'editor') { if (editorMode) { editorMode.style.display = 'block'; console.log('Включен режим редактора серии - editorMode виден'); } if (publicMode) { publicMode.style.display = 'none'; console.log('Публичный режим серии скрыт'); } // Убеждаемся, что поле ввода видно и доступно const totalInput = document.getElementById('seriesTotalInput'); if (totalInput) { console.log('Поле seriesTotalInput найдено и доступно для редактирования'); } else { console.error('Поле seriesTotalInput не найдено!'); } } else { if (editorMode) { editorMode.style.display = 'none'; console.log('Режим редактора серии скрыт'); } if (publicMode) { publicMode.style.display = 'block'; updateSeriesProgress(); console.log('Включен публичный режим серии'); } } } // Функция для обновления прогресс-бара серии function updateSeriesProgress() { const totalElement = document.querySelector('[data-series-total]'); const progressBar = document.getElementById('seriesProgressBar'); if (totalElement && progressBar) { const total = parseInt(totalElement.textContent); if (!isNaN(total) && total > 0) { // Прогресс бар показывает просто индикатор серии progressBar.style.width = '100%'; } } } // Обработчик изменений в полях ввода в режиме редактирования function setupInputHandlers() { // Всего копий const totalInput = document.getElementById('seriesTotalInput'); const totalOutput = document.querySelector('[data-series-total]'); if (totalInput && totalOutput) { totalInput.addEventListener('input', function() { const totalValue = parseInt(this.value); totalOutput.textContent = totalValue; updateSeriesProgress(); }); } } // Собираем данные о серии для отправки родительскому окну function collectSeriesData() { const totalInput = document.getElementById('seriesTotalInput'); if (!totalInput) { console.error('Элемент seriesTotalInput не найден!'); return { total: 100 }; // Значение по умолчанию } // Получаем значение и выполняем базовую валидацию let totalValue = parseInt(totalInput.value); if (isNaN(totalValue) || totalValue < 1) { totalValue = 100; // Устанавливаем значение по умолчанию при некорректном вводе console.warn('Некорректное значение всего копий, установлено значение по умолчанию:', totalValue); } const seriesData = { total: totalValue }; console.log('Собраны данные о серии:', seriesData); return seriesData; } // Обрабатываем сообщения от родительского окна (iframe) window.addEventListener('message', function(event) { try { console.log('Получено сообщение от родительского окна:', event.data); const data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data; // Проверяем, требуется ли переключить режим if (data && data.mode) { console.log('Переключение режима на:', data.mode); switchMode(data.mode); } // Проверяем, есть ли данные о серии if (data && data.seriesData) { const seriesData = data.seriesData; console.log('Получены данные о серии:', seriesData); // Обновляем информацию о всего копий if (seriesData.total) { const totalInput = document.getElementById('seriesTotalInput'); if (totalInput) totalInput.value = seriesData.total; const totalOutput = document.querySelector('[data-series-total]'); if (totalOutput) totalOutput.textContent = seriesData.total; // Обновляем прогресс-бар updateSeriesProgress(); } } // Проверяем, запрашивается ли сбор данных о серии if (data && data.action === 'collectSeriesData') { console.log('Запрошен сбор данных о серии'); const seriesData = collectSeriesData(); // Отправляем собранные данные обратно родителю if (window.parent) { console.log('Отправляем данные о серии родителю:', seriesData); window.parent.postMessage(JSON.stringify({ action: 'seriesDataCollected', seriesData: seriesData }), '*'); } } } catch (error) { console.error('Ошибка обработки сообщения:', error); } }); // Определяем режим и устанавливаем соответствующее отображение const currentMode = detectMode(); console.log('Определен текущий режим:', currentMode); switchMode(currentMode); // Настраиваем обработчики ввода в режиме редактирования if (currentMode === 'editor') { setupInputHandlers(); console.log('Настроены обработчики ввода для режима редактирования'); } // Инициализируем прогресс-бар для публичного режима updateSeriesProgress(); // Сигнализируем родительскому окну, что шаблон готов принимать настройки if (window.parent) { try { console.log('Отправка сообщения о готовности шаблона'); window.parent.postMessage(JSON.stringify({ action: 'templateReady', mode: currentMode }), '*'); } catch (e) { console.error('Ошибка отправки сообщения родительскому окну:', e); } } }); </script> </body> </html> <script> // Режим отображения шаблона const templateMode = "editor"; // Ускоряем инициализацию document.addEventListener("DOMContentLoaded", function() { // Помечаем элементы как загруженные для быстрого отображения document.body.setAttribute("data-loaded", "true"); // Устанавливаем режим отображения для серии шаблонов const editorMode = document.querySelector(".series-editor-mode"); const publicMode = document.querySelector(".series-public-mode"); if (editorMode && publicMode) { if (templateMode === "editor") { editorMode.style.display = "block"; publicMode.style.display = "none"; } else { editorMode.style.display = "none"; publicMode.style.display = "block"; } } }); // Отключаем контекстное меню document.addEventListener("contextmenu", e => e.preventDefault()); // Отключаем выделение текста document.addEventListener("selectstart", e => e.preventDefault()); // Оптимизация для плавной прокрутки document.documentElement.style.scrollBehavior = "smooth"; // Принудительное отключение масштабирования document.addEventListener("wheel", e => { if (e.ctrlKey) e.preventDefault(); }, { passive: false }); // Предзагрузка изображений window.addEventListener("load", () => { const images = document.querySelectorAll("img"); if (images.length > 0) { images.forEach(img => { if (!img.loading) img.loading = "eager"; if (img.dataset.src) { const imgPreload = new Image(); imgPreload.src = img.dataset.src; } }); } }); </script>
</body>
</html>";