/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–¥–∏–∞-—Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è Laravel –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ
 */

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
const MediaEditor = {
    state: {
        currentFile: null,
        currentFileType: null,
        videoDuration: 0,
        videoStart: 0,
        videoEnd: 0,
        imageScale: 1,
        imageX: 0,
        imageY: 0,
        isDragging: false,
        lastTouch: null
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaEditor (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
        this.bindEvents();
        this.setupDragAndDrop();
    },

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        const uploadBtn = document.getElementById('uploadBtn');
        const mediaFile = document.getElementById('mediaFile');
        
        if (uploadBtn && mediaFile) {
            uploadBtn.addEventListener('click', () => mediaFile.click());
            mediaFile.addEventListener('change', this.handleFileSelect.bind(this));
        }

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        const saveBtn = document.getElementById('saveBtn');
        const resetBtn = document.getElementById('resetBtn');
        const cancelBtn = document.getElementById('cancelBtn');

        if (saveBtn) saveBtn.addEventListener('click', this.handleSave.bind(this));
        if (resetBtn) resetBtn.addEventListener('click', this.handleReset.bind(this));
        if (cancelBtn) cancelBtn.addEventListener('click', this.handleReset.bind(this));

        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const imageViewport = document.getElementById('imageViewport');
        if (imageViewport) {
            this.setupImageEditor(imageViewport);
        }

        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –≤–∏–¥–µ–æ
        const videoPreview = document.getElementById('videoPreview');
        if (videoPreview) {
            videoPreview.addEventListener('loadedmetadata', this.handleVideoLoaded.bind(this));
        }

        // –ú–æ–±–∏–ª—å–Ω—ã–µ —Å–ª–∞–π–¥–µ—Ä—ã
        this.setupVideoSliders();
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop
    setupDragAndDrop() {
        const container = document.querySelector('.media-editor-container');
        if (!container) return;

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            container.addEventListener(eventName, this.preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            container.addEventListener(eventName, this.highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            container.addEventListener(eventName, this.unhighlight, false);
        });

        container.addEventListener('drop', this.handleDrop.bind(this), false);
    },

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    },

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ drag
    highlight(e) {
        e.currentTarget.classList.add('highlight');
    },

    // –°–Ω—è—Ç–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    unhighlight(e) {
        e.currentTarget.classList.remove('highlight');
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ drop
    handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        
        if (files.length > 0) {
            this.processFile(files[0]);
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    handleFileSelect(e) {
        const file = e.target.files[0];
        if (file) {
            this.processFile(file);
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
    processFile(file) {
        console.log('üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞:', {
            name: file.name,
            type: file.type,
            size: file.size
        });
        
        if (!this.validateFile(file)) return;

        this.state.currentFile = file;
        this.state.currentFileType = file.type.startsWith('video/') ? 'video' : 'image';
        
        console.log('‚úÖ –§–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω, —Ç–∏–ø:', this.state.currentFileType);

        const reader = new FileReader();
        reader.onload = (e) => {
            if (this.state.currentFileType === 'image') {
                this.showImageEditor(e.target.result);
            } else {
                this.showVideoEditor(e.target.result);
            }
        };
        reader.readAsDataURL(file);
    },

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    validateFile(file) {
        const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'video/mp4', 'video/mov', 'video/avi'];
        const maxSize = 50 * 1024 * 1024; // 50MB

        if (!allowedTypes.includes(file.type)) {
            alert('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ' + allowedTypes.join(', '));
            return false;
        }

        if (file.size > maxSize) {
            alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB');
            return false;
        }

        return true;
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    showImageEditor(imageURL) {
        this.hideSection('uploadSection');
        this.showSection('imageEditorSection');
        
        const image = document.getElementById('imagePreview');
        if (image) {
            image.src = imageURL;
            this.resetImageTransform();
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤–∏–¥–µ–æ
    showVideoEditor(videoURL) {
        this.hideSection('uploadSection');
        this.showSection('videoEditorSection');
        
        const video = document.getElementById('videoPreview');
        if (video) {
            video.src = videoURL;
        }
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    setupImageEditor(viewport) {
        const image = viewport.querySelector('#imagePreview');
        if (!image) return;

        let startX, startY, initialScale = 1, initialTranslateX = 0, initialTranslateY = 0;

        // –ú—ã—à—å
        viewport.addEventListener('wheel', (e) => {
            e.preventDefault();
            const delta = e.deltaY > 0 ? 0.9 : 1.1;
            this.state.imageScale = Math.max(0.5, Math.min(3, this.state.imageScale * delta));
            this.updateImageTransform();
        });

        viewport.addEventListener('mousedown', (e) => {
            this.state.isDragging = true;
            startX = e.clientX - this.state.imageX;
            startY = e.clientY - this.state.imageY;
        });

        document.addEventListener('mousemove', (e) => {
            if (!this.state.isDragging) return;
            this.state.imageX = e.clientX - startX;
            this.state.imageY = e.clientY - startY;
            this.updateImageTransform();
        });

        document.addEventListener('mouseup', () => {
            this.state.isDragging = false;
        });

        // –°–µ–Ω—Å–æ—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        viewport.addEventListener('touchstart', (e) => {
            if (e.touches.length === 1) {
                this.state.isDragging = true;
                const touch = e.touches[0];
                startX = touch.clientX - this.state.imageX;
                startY = touch.clientY - this.state.imageY;
            } else if (e.touches.length === 2) {
                this.state.isDragging = false;
                this.state.lastTouch = {
                    distance: this.getTouchDistance(e.touches),
                    scale: this.state.imageScale
                };
            }
        });

        viewport.addEventListener('touchmove', (e) => {
            e.preventDefault();
            
            if (e.touches.length === 1 && this.state.isDragging) {
                const touch = e.touches[0];
                this.state.imageX = touch.clientX - startX;
                this.state.imageY = touch.clientY - startY;
                this.updateImageTransform();
            } else if (e.touches.length === 2 && this.state.lastTouch) {
                const distance = this.getTouchDistance(e.touches);
                const scaleChange = distance / this.state.lastTouch.distance;
                this.state.imageScale = Math.max(0.5, Math.min(3, this.state.lastTouch.scale * scaleChange));
                this.updateImageTransform();
            }
        });

        viewport.addEventListener('touchend', () => {
            this.state.isDragging = false;
            this.state.lastTouch = null;
        });
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –∫–∞—Å–∞–Ω–∏—è–º–∏
    getTouchDistance(touches) {
        const dx = touches[0].clientX - touches[1].clientX;
        const dy = touches[0].clientY - touches[1].clientY;
        return Math.sqrt(dx * dx + dy * dy);
    },

    // –°–±—Ä–æ—Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    resetImageTransform() {
        this.state.imageScale = 1;
        this.state.imageX = 0;
        this.state.imageY = 0;
        this.updateImageTransform();
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    updateImageTransform() {
        const image = document.getElementById('imagePreview');
        if (image) {
            image.style.transform = `translate(${this.state.imageX}px, ${this.state.imageY}px) scale(${this.state.imageScale})`;
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
    handleVideoLoaded(e) {
        this.state.videoDuration = e.target.duration;
        this.state.videoEnd = Math.min(15, this.state.videoDuration);
        this.updateVideoSliders();
        this.updateTimeDisplay();
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ
    setupVideoSliders() {
        const startSlider = document.getElementById('videoStartSlider');
        const endSlider = document.getElementById('videoEndSlider');

        if (startSlider) {
            startSlider.addEventListener('input', (e) => {
                this.state.videoStart = parseFloat(e.target.value);
                if (this.state.videoStart >= this.state.videoEnd) {
                    this.state.videoStart = Math.max(0, this.state.videoEnd - 0.1);
                    e.target.value = this.state.videoStart;
                }
                this.updateTimeDisplay();
            });
        }

        if (endSlider) {
            endSlider.addEventListener('input', (e) => {
                this.state.videoEnd = parseFloat(e.target.value);
                if (this.state.videoEnd <= this.state.videoStart) {
                    this.state.videoEnd = Math.min(this.state.videoDuration, this.state.videoStart + 0.1);
                    e.target.value = this.state.videoEnd;
                }
                this.updateTimeDisplay();
            });
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–æ–≤
    updateVideoSliders() {
        const startSlider = document.getElementById('videoStartSlider');
        const endSlider = document.getElementById('videoEndSlider');

        if (startSlider) {
            startSlider.max = this.state.videoDuration;
            startSlider.value = this.state.videoStart;
        }

        if (endSlider) {
            endSlider.max = this.state.videoDuration;
            endSlider.value = this.state.videoEnd;
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    updateTimeDisplay() {
        const startDisplay = document.getElementById('startTimeDisplay');
        const endDisplay = document.getElementById('endTimeDisplay');

        if (startDisplay) {
            startDisplay.textContent = this.formatTime(this.state.videoStart);
        }

        if (endDisplay) {
            endDisplay.textContent = this.formatTime(this.state.videoEnd);
        }
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${minutes}:${secs.toString().padStart(2, '0')}`;
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    async handleSave() {
        console.log('üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞');
        
        if (!this.state.currentFile) {
            alert('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
            return;
        }

        this.showProcessing();

        try {
            const formData = new FormData();
            formData.append('media_file', this.state.currentFile);

            // –î–æ–±–∞–≤–ª—è–µ–º ID —à–∞–±–ª–æ–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            const templateId = this.getTemplateId();
            if (templateId) {
                formData.append('template_id', templateId);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            if (this.state.currentFileType === 'image') {
                const cropData = {
                    scale: this.state.imageScale,
                    x: this.state.imageX,
                    y: this.state.imageY
                };
                formData.append('crop_data', JSON.stringify(cropData));
            } else if (this.state.currentFileType === 'video') {
                formData.append('video_start', this.state.videoStart);
                formData.append('video_end', this.state.videoEnd);
            }

            // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
            const csrfToken = document.querySelector('meta[name="csrf-token"]');
            if (!csrfToken) {
                throw new Error('CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const response = await fetch('/media/process', {
                method: 'POST',
                body: formData,
                headers: {
                    'X-CSRF-TOKEN': csrfToken.getAttribute('content')
                }
            });

            const result = await response.json();

            if (result.success) {
                console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', result);
                
                if (result.redirect_url) {
                    window.location.href = result.redirect_url;
                } else {
                    alert('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
                    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
                    window.location.href = '/create-template';
                }
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message);
        } finally {
            this.hideProcessing();
        }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —à–∞–±–ª–æ–Ω–∞ –∏–∑ URL
    getTemplateId() {
        const urlParts = window.location.pathname.split('/');
        const editorIndex = urlParts.indexOf('editor');
        
        if (editorIndex !== -1 && urlParts[editorIndex + 1]) {
            return urlParts[editorIndex + 1];
        }
        
        return null;
    },

    // –°–±—Ä–æ—Å
    handleReset() {
        this.state.currentFile = null;
        this.state.currentFileType = null;
        this.state.videoDuration = 0;
        this.state.videoStart = 0;
        this.state.videoEnd = 0;
        this.resetImageTransform();
        
        this.hideSection('imageEditorSection');
        this.hideSection('videoEditorSection');
        this.showSection('uploadSection');
        
        const mediaFile = document.getElementById('mediaFile');
        if (mediaFile) {
            mediaFile.value = '';
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é
    showSection(sectionId) {
        const section = document.getElementById(sectionId);
        if (section) {
            section.style.display = 'block';
        }
    },

    // –°–∫—Ä—ã—Ç—å —Å–µ–∫—Ü–∏—é
    hideSection(sectionId) {
        const section = document.getElementById(sectionId);
        if (section) {
            section.style.display = 'none';
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showProcessing() {
        const indicator = document.getElementById('processingIndicator');
        if (indicator) {
            indicator.style.display = 'flex';
        }
    },

    // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    hideProcessing() {
        const indicator = document.getElementById('processingIndicator');
        if (indicator) {
            indicator.style.display = 'none';
        }
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaEditor (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
    MediaEditor.init();
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.MediaEditor = MediaEditor;
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é processMedia –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    window.processMedia = function() {
        console.log('üîÑ –í—ã–∑–æ–≤ processMedia() —á–µ—Ä–µ–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å');
        if (MediaEditor.state.currentFile) {
            return MediaEditor.handleSave();
        } else {
            console.warn('‚ö†Ô∏è processMedia –≤—ã–∑–≤–∞–Ω, –Ω–æ —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        }
    };
    
    console.log('‚úÖ MediaEditor —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ');
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.MediaEditor = MediaEditor;
