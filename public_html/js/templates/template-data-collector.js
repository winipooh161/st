/**
 * –°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–±–æ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * –î–∞—Ç–∞: 4 –∏—é–ª—è 2025 –≥.
 */

// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç TemplateDataCollector
const TemplateDataCollector = (function() {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    const state = {
        baseTemplateId: null,
        editableElements: {},
        templateName: '',
        templateDescription: '',
        saveInProgress: false,
        lastSavedData: null,
        unsavedChanges: false // –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    };
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const config = {
        editableSelector: '[data-editable]',
        saveButtonSelector: '#save-template-btn, #save-media-btn',
        nameInputSelector: '#template-name',
        descriptionInputSelector: '#template-description',
        loadingOverlayClass: 'loading-overlay',
        feedbackMessageClass: 'feedback-message'
    };
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –ë–î (YYYY-MM-DD)
     * @param {string} dateString - –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "01.01.2025")
     * @returns {string|null} –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ null
     */
    function convertDateToDbFormat(dateString) {
        if (!dateString || dateString === '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É') {
            return null;
        }
        
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            let date;
            
            // –§–æ—Ä–º–∞—Ç dd.mm.yyyy
            if (dateString.includes('.')) {
                const parts = dateString.split('.');
                if (parts.length === 3) {
                    date = new Date(parts[2], parts[1] - 1, parts[0]);
                }
            }
            // –§–æ—Ä–º–∞—Ç yyyy-mm-dd (—É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)
            else if (dateString.includes('-')) {
                date = new Date(dateString);
            }
            // –§–æ—Ä–º–∞—Ç dd/mm/yyyy
            else if (dateString.includes('/')) {
                const parts = dateString.split('/');
                if (parts.length === 3) {
                    date = new Date(parts[2], parts[1] - 1, parts[0]);
                }
            }
            else {
                return null;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞
            if (date && !isNaN(date.getTime())) {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }
            
            return null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç—ã:', error);
            return null;
        }
    }
    
    /**
     * –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     * @returns {Object} —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    function collectData() {
        const editableElements = document.querySelectorAll(config.editableSelector);
        const data = {};
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        editableElements.forEach(element => {
            const fieldName = element.getAttribute('data-editable');
            const fieldType = element.getAttribute('data-field-type') || 'text';
            const value = element.innerText.trim();
            
            data[fieldName] = {
                value: value,
                type: fieldType
            };
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        const nameInput = document.querySelector(config.nameInputSelector);
        const descriptionInput = document.querySelector(config.descriptionInputSelector);
        
        console.log('–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–º–µ–Ω–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è:');
        console.log('nameInput —ç–ª–µ–º–µ–Ω—Ç:', nameInput);
        console.log('descriptionInput —ç–ª–µ–º–µ–Ω—Ç:', descriptionInput);
        
        if (nameInput) {
            state.templateName = nameInput.value.trim();
            console.log('–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–Ω–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º:', state.templateName);
        } else {
            state.templateName = ''; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            console.log('–≠–ª–µ–º–µ–Ω—Ç –∏–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É');
        }
        
        if (descriptionInput) {
            state.templateDescription = descriptionInput.value.trim();
            console.log('–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º:', state.templateDescription);
        } else {
            state.templateDescription = ''; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            console.log('–≠–ª–µ–º–µ–Ω—Ç –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state.editableElements = data;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–ª–æ–∂–∫–∏
        const coverPathElement = document.querySelector('#coverPath');
        const coverTypeElement = document.querySelector('#coverType');
        const coverThumbnailElement = document.querySelector('#coverThumbnail');
        
        const coverData = {
            path: coverPathElement ? coverPathElement.value : null,
            type: coverTypeElement ? coverTypeElement.value : null,
            thumbnail: coverThumbnailElement ? coverThumbnailElement.value : null
        };
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–∞—Ç–µ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–∏–ø–æ–º date
        const dateData = {
            date: null,
            format: null,
            settings: {}
        };
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const dateRangeData = {
            date_from: null,
            date_to: null
        };
        
        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–∏–ø–æ–º date
        editableElements.forEach(element => {
            const fieldType = element.getAttribute('data-field-type');
            if (fieldType === 'date') {
                const fieldName = element.getAttribute('data-editable');
                const value = element.innerText.trim();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –¥–ª—è –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)
                if (value && value !== '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É') {
                    dateData.date = value;
                    dateData.format = element.getAttribute('data-date-format') || 'd.m.Y';
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—Ç—ã
                    const minDate = element.getAttribute('data-min-date');
                    const maxDate = element.getAttribute('data-max-date');
                    const locale = element.getAttribute('data-locale');
                    
                    if (minDate || maxDate || locale) {
                        dateData.settings = {
                            minDate: minDate || null,
                            maxDate: maxDate || null,
                            locale: locale || 'ru'
                        };
                    }
                }
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
                if (value && value !== '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É') {
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    const dbDate = convertDateToDbFormat(value);
                    
                    if (fieldName === 'start_date' || fieldName === 'date_from') {
                        dateRangeData.date_from = dbDate;
                    } else if (fieldName === 'end_date' || fieldName === 'date_to') {
                        dateRangeData.date_to = dbDate;
                    }
                }
                
                console.log('üóìÔ∏è –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–∞—Ç—ã:', {
                    fieldName,
                    value,
                    dbDate: convertDateToDbFormat(value),
                    format: dateData.format,
                    settings: dateData.settings
                });
            }
        });
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –æ–±–ª–æ–∂–∫–æ–π
        console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–æ–∂–∫–∏:');
        console.log('- –≠–ª–µ–º–µ–Ω—Ç—ã –æ–±–ª–æ–∂–∫–∏:', {
            coverPath: document.querySelector('#coverPath'),
            coverType: document.querySelector('#coverType'),
            coverThumbnail: document.querySelector('#coverThumbnail')
        });
        console.log('- –ó–Ω–∞—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±–ª–æ–∂–∫–∏:', {
            coverPath: document.querySelector('#coverPath')?.value,
            coverType: document.querySelector('#coverType')?.value,
            coverThumbnail: document.querySelector('#coverThumbnail')?.value
        });
        console.log('- –î–∞–Ω–Ω—ã–µ –æ–±–ª–æ–∂–∫–∏ –∏–∑ collectData:', coverData);
        
        return {
            name: state.templateName,
            description: state.templateDescription,
            baseTemplateId: state.baseTemplateId,
            elements: data,
            cover: coverData,
            date: dateData,
            dateRange: dateRangeData // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        };
    }
    
    /**
     * –ü–æ–∫–∞–∑ –æ–≤–µ—Ä–ª–µ—è –∑–∞–≥—Ä—É–∑–∫–∏
     * @param {string} message - —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    function showLoadingOverlay(message = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞...') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–≤–µ—Ä–ª–µ–π
        let overlay = document.querySelector(`.${config.loadingOverlayClass}`);
        
        if (!overlay) {
            overlay = document.createElement('div');
            overlay.className = config.loadingOverlayClass;
            document.body.appendChild(overlay);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        overlay.innerHTML = `
            <div class="loading-spinner"></div>
            <div class="loading-message">${message}</div>
        `;
        
        overlay.style.display = 'flex';
    }
    
    /**
     * –°–∫—Ä—ã—Ç–∏–µ –æ–≤–µ—Ä–ª–µ—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    function hideLoadingOverlay() {
        const overlay = document.querySelector(`.${config.loadingOverlayClass}`);
        
        if (overlay) {
            overlay.style.display = 'none';
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     * @param {string} message - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {string} type - —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (success, error, warning, info)
     * @param {number} duration - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    function showFeedbackMessage(message, type = 'success', duration = 3000) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        let messageElement = document.querySelector(`.${config.feedbackMessageClass}`);
        
        if (!messageElement) {
            messageElement = document.createElement('div');
            messageElement.className = config.feedbackMessageClass;
            document.body.appendChild(messageElement);
        }
        
        // –ó–∞–¥–∞–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        messageElement.className = `${config.feedbackMessageClass} ${type}`;
        messageElement.textContent = message;
        messageElement.style.display = 'block';
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            messageElement.style.display = 'none';
        }, duration);
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞
     * @param {Event|Object} e - —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–µ—Ä–∏–∏
     */
    async function saveTemplateData(e) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ e —Å–æ–±—ã—Ç–∏–µ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (e && e.preventDefault && typeof e.preventDefault === 'function') {
            e.preventDefault();
        }
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if (state.saveInProgress) {
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
            return;
        }
        
        state.saveInProgress = true;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        let seriesSettings = null;
        if (e && typeof e === 'object' && !e.preventDefault) {
            seriesSettings = e;
        }
        
        try {
            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            const templateData = collectData();
            
            console.log('–°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞:', templateData);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
            if (!templateData.name || templateData.name.trim() === '') {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞
                const now = new Date();
                const defaultName = `–®–∞–±–ª–æ–Ω –æ—Ç ${now.getDate()}.${now.getMonth() + 1}.${now.getFullYear()}`;
                templateData.name = defaultName;
                console.log(`–ò–º—è —à–∞–±–ª–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${defaultName}`);
            } else {
                console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∏–º—è —à–∞–±–ª–æ–Ω–∞: ${templateData.name}`);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
            showLoadingOverlay();
            
            // –ü–æ–ª—É—á–∞–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞
            const templateContentElement = document.querySelector('#template-content');
            const templateHtml = templateContentElement ? templateContentElement.innerHTML : '';
            
            console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:');
            console.log('- baseTemplateId:', window.baseTemplateId);
            console.log('- templateHtml length:', templateHtml.length);
            console.log('- templateHtml preview:', templateHtml.substring(0, 100) + '...');
            console.log('- editable_data:', templateData.elements);
            console.log('- cover_path:', templateData.cover.path);
            console.log('- cover_type:', templateData.cover.type);
            console.log('- cover_thumbnail:', templateData.cover.thumbnail);
            console.log('- template_date:', templateData.date.date);
            console.log('- date_format:', templateData.date.format);
            console.log('- date_settings:', templateData.date.settings);
            console.log('- date_from:', templateData.dateRange.date_from);
            console.log('- date_to:', templateData.dateRange.date_to);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            const postData = {
                name: templateData.name,
                description: templateData.description || '',
                base_template_id: window.baseTemplateId || null,
                template_html: templateHtml, // HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞
                editable_data: templateData.elements // –î–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞–∫ –æ–±—ä–µ–∫—Ç
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–ª–æ–∂–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (templateData.cover.path) {
                postData.cover_path = templateData.cover.path;
                postData.cover_type = templateData.cover.type;
                if (templateData.cover.thumbnail) {
                    postData.cover_thumbnail = templateData.cover.thumbnail;
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–∞—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (templateData.date.date) {
                postData.template_date = templateData.date.date;
                postData.date_format = templateData.date.format;
                if (Object.keys(templateData.date.settings).length > 0) {
                    postData.date_settings = templateData.date.settings;
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (templateData.dateRange.date_from) {
                postData.date_from = templateData.dateRange.date_from;
                console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ "–æ—Ç":', postData.date_from);
            }
            if (templateData.dateRange.date_to) {
                postData.date_to = templateData.dateRange.date_to;
                console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ "–¥–æ":', postData.date_to);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ
            if (seriesSettings) {
                console.log('–î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–∏–∏:', seriesSettings);
                postData.is_series = seriesSettings.is_series !== undefined ? seriesSettings.is_series : seriesSettings.isSeries;
                postData.series_max = seriesSettings.series_max !== undefined ? seriesSettings.series_max : seriesSettings.seriesMax;
                postData.series_current = seriesSettings.series_current !== undefined ? seriesSettings.series_current : seriesSettings.seriesCurrent;
            } else if (window.seriesSettings) {
                console.log('–î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–∏–∏:', window.seriesSettings);
                postData.is_series = window.seriesSettings.is_series !== undefined ? window.seriesSettings.is_series : window.seriesSettings.isSeries;
                postData.series_max = window.seriesSettings.series_max !== undefined ? window.seriesSettings.series_max : window.seriesSettings.seriesMax;
                postData.series_current = window.seriesSettings.series_current !== undefined ? window.seriesSettings.series_current : window.seriesSettings.seriesCurrent;
            }
            
            console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', postData);
            
            // –ü–æ–ª—É—á–∞–µ–º CSRF-—Ç–æ–∫–µ–Ω –∏–∑ –º–µ—Ç–∞-—Ç–µ–≥–∞ (Laravel)
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await fetch(window.storeUrl || '/user-templates', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'X-CSRF-TOKEN': csrfToken
                },
                body: JSON.stringify(postData)
            });
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            if (response.ok) {
                const data = await response.json();
                console.log('–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', data);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
                state.lastSavedData = templateData;
                
                showFeedbackMessage('–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã"
                setTimeout(() => {
                    if (data.redirect_url) {
                        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                        window.location.href = data.redirect_url;
                    } else {
                        // –ò–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã"
                        window.location.href = window.myTemplatesUrl || '/my-templates';
                    }
                }, 1000);
            } else {
                const errorData = await response.json();
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', errorData);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                if (errorData.errors) {
                    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errorData.errors);
                    const errorMessages = Object.entries(errorData.errors)
                        .map(([field, messages]) => `${field}: ${messages.join(', ')}`)
                        .join('\n');
                    showFeedbackMessage(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n${errorMessages}`, 'error');
                } else {
                    showFeedbackMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: ${errorData.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error);
            showFeedbackMessage(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${error.message}`, 'error');
        } finally {
            hideLoadingOverlay();
            state.saveInProgress = false;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
     * @param {string} fieldId - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—è
     * @param {string} value - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
     * @param {string} fieldType - —Ç–∏–ø –ø–æ–ª—è (text, date –∏ —Ç.–¥.)
     */
    function updateField(fieldId, value, fieldType) {
        console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è ${fieldId} –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö: ${value} (${fieldType})`);
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!state.editableElements[fieldId]) {
            state.editableElements[fieldId] = {
                value: value,
                type: fieldType
            };
        } else {
            state.editableElements[fieldId].value = value;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–æ–∂–∫–∏
     * @param {string} path - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ–±–ª–æ–∂–∫–∏
     * @param {string} type - —Ç–∏–ø –æ–±–ª–æ–∂–∫–∏ (image, video)
     * @param {string} thumbnail - –º–∏–Ω–∏–∞—Ç—é—Ä–∞ (–¥–ª—è –≤–∏–¥–µ–æ)
     */
    function updateCoverData(path, type, thumbnail = null) {
        console.log('üì∑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–æ–∂–∫–∏:', { path, type, thumbnail });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è
        let coverPathElement = document.querySelector('#coverPath');
        let coverTypeElement = document.querySelector('#coverType');
        let coverThumbnailElement = document.querySelector('#coverThumbnail');
        
        if (!coverPathElement) {
            coverPathElement = document.createElement('input');
            coverPathElement.type = 'hidden';
            coverPathElement.id = 'coverPath';
            document.body.appendChild(coverPathElement);
        }
        
        if (!coverTypeElement) {
            coverTypeElement = document.createElement('input');
            coverTypeElement.type = 'hidden';
            coverTypeElement.id = 'coverType';
            document.body.appendChild(coverTypeElement);
        }
        
        if (!coverThumbnailElement) {
            coverThumbnailElement = document.createElement('input');
            coverThumbnailElement.type = 'hidden';
            coverThumbnailElement.id = 'coverThumbnail';
            document.body.appendChild(coverThumbnailElement);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        coverPathElement.value = path || '';
        coverTypeElement.value = type || '';
        coverThumbnailElement.value = thumbnail || '';
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        setUnsavedChanges(true);
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–ª–æ–∂–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞—Ç–µ –≤ —à–∞–±–ª–æ–Ω–µ
     * @param {string} date - –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
     * @param {string} format - —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
     * @param {Object} settings - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    function updateDateData(date, format = 'd.m.Y', settings = {}) {
        console.log('üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞—Ç–µ:', { date, format, settings });
        
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–∏–ø–æ–º date –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        const dateElement = document.querySelector('[data-field-type="date"]');
        if (dateElement) {
            dateElement.innerText = date;
            dateElement.setAttribute('data-date-format', format);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            if (settings.minDate) {
                dateElement.setAttribute('data-min-date', settings.minDate);
            }
            if (settings.maxDate) {
                dateElement.setAttribute('data-max-date', settings.maxDate);
            }
            if (settings.locale) {
                dateElement.setAttribute('data-locale', settings.locale);
            }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        setUnsavedChanges(true);
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
     * @param {boolean} hasChanges - —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    function setUnsavedChanges(hasChanges) {
        state.unsavedChanges = hasChanges;
        
        // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        const saveButtons = document.querySelectorAll(config.saveButtonSelector);
        saveButtons.forEach(button => {
            if (hasChanges) {
                button.classList.add('btn-unsaved');
            } else {
                button.classList.remove('btn-unsaved');
            }
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    function init() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞...');
        
        // –ü–æ–ª—É—á–∞–µ–º ID –±–∞–∑–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (typeof window.baseTemplateId !== 'undefined') {
            state.baseTemplateId = window.baseTemplateId;
            console.log(`ID –±–∞–∑–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞: ${state.baseTemplateId}`);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        window.saveTemplateData = saveTemplateData;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        document.querySelectorAll(config.saveButtonSelector).forEach(button => {
            button.addEventListener('click', saveTemplateData);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –æ–±–ª–æ–∂–∫–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–µ–¥–∏–∞-—Ä–µ–¥–∞–∫—Ç–æ—Ä—É
        const coverContainer = document.querySelector('#coverContainer');
        if (coverContainer) {
            coverContainer.style.cursor = 'pointer';
            coverContainer.addEventListener('click', function() {
                console.log('üñºÔ∏è –ö–ª–∏–∫ –ø–æ –æ–±–ª–æ–∂–∫–µ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –º–µ–¥–∏–∞-—Ä–µ–¥–∞–∫—Ç–æ—Ä—É');
                window.location.href = '/media/editor?return_url=' + encodeURIComponent(window.location.href);
            });
        }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        document.addEventListener('template-editor:change', function(e) {
            const { fieldName, value, fieldType } = e.detail;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            state.editableElements[fieldName] = {
                value: value,
                type: fieldType
            };
        });
        
        // –°—Ç–∏–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        addFeedbackStyles();
        
        console.log('–°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–≤–µ—Ä–ª–µ—è
     */
    function addFeedbackStyles() {
        const styleElement = document.createElement('style');
        styleElement.textContent = `
            .loading-overlay {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: rgba(255, 255, 255, 0.8);
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                z-index: 9999;
                backdrop-filter: blur(2px);
            }
            
            .loading-spinner {
                width: 40px;
                height: 40px;
                border: 4px solid rgba(0, 123, 255, 0.3);
                border-top: 4px solid #007bff;
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }
            
            .loading-message {
                margin-top: 10px;
                font-size: 16px;
                color: #333;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            
            .feedback-message {
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 20px;
                border-radius: 4px;
                font-size: 14px;
                z-index: 9999;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                display: none;
                animation: fadeInRight 0.3s ease;
            }
            
            .feedback-message.success {
                background-color: #d4edda;
                color: #155724;
                border-left: 4px solid #28a745;
            }
            
            .feedback-message.error {
                background-color: #f8d7da;
                color: #721c24;
                border-left: 4px solid #dc3545;
            }
            
            .feedback-message.warning {
                background-color: #fff3cd;
                color: #856404;
                border-left: 4px solid #ffc107;
            }
            
            .feedback-message.info {
                background-color: #d1ecf1;
                color: #0c5460;
                border-left: 4px solid #17a2b8;
            }
            
            @keyframes fadeInRight {
                from {
                    opacity: 0;
                    transform: translateX(20px);
                }
                to {
                    opacity: 1;
                    transform: translateX(0);
                }
            }
         
        `;
        
        document.head.appendChild(styleElement);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ API
    return {
        init,
        saveTemplateData,
        collectData,
        updateField,
        setUnsavedChanges,
        updateCoverData,
        updateDateData
    };
})();

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ 
window.TemplateDataCollector = TemplateDataCollector;

// –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é saveTemplateData –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
window.saveTemplateData = function(e) {
    if (window.TemplateDataCollector && window.TemplateDataCollector.saveTemplateData) {
        return window.TemplateDataCollector.saveTemplateData(e);
    } else {
        console.error('–§—É–Ω–∫—Ü–∏—è saveTemplateData –∏–∑ TemplateDataCollector –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        return false;
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–æ–∂–∫–∏
window.updateCoverData = function(path, type, thumbnail = null) {
    if (window.TemplateDataCollector && window.TemplateDataCollector.updateCoverData) {
        return window.TemplateDataCollector.updateCoverData(path, type, thumbnail);
    } else {
        console.error('–§—É–Ω–∫—Ü–∏—è updateCoverData –∏–∑ TemplateDataCollector –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        return false;
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞—Ç–µ
window.updateDateData = function(date, format = 'd.m.Y', settings = {}) {
    if (window.TemplateDataCollector && window.TemplateDataCollector.updateDateData) {
        return window.TemplateDataCollector.updateDateData(date, format, settings);
    } else {
        console.error('–§—É–Ω–∫—Ü–∏—è updateDateData –∏–∑ TemplateDataCollector –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        return false;
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
document.addEventListener('DOMContentLoaded', function() {
    if (typeof TemplateDataCollector !== 'undefined' && TemplateDataCollector.init) {
        TemplateDataCollector.init();
        console.log('‚úÖ TemplateDataCollector —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    } else {
        console.error('‚ùå TemplateDataCollector –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ init');
    }
});

// –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
(function() {
    if (typeof TemplateDataCollector !== 'undefined' && TemplateDataCollector.init) {
        try {
            TemplateDataCollector.init();
            console.log('‚úÖ TemplateDataCollector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ');
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TemplateDataCollector:', e);
        }
    }
})();

