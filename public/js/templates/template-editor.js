/**
 * –†–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤
 * –í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –¥–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è
 * –î–∞—Ç–∞: 4 –∏—é–ª—è 2025 –≥.
 */

// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç TemplateEditor
const TemplateEditor = (function() {
    // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    const state = {
        activeElement: null,
        datePickerInstances: {},
        editableElements: {},
        unsavedChanges: false,
        calendar: null
    };
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 
    const config = {
        editableSelector: "[data-editable]",
        dateFieldSelector: "[data-field-type=\"date\"]",
        editingClass: "editing",
        dateFormat: "DD.MM.YYYY",
        calendarContainerId: "simple-calendar-container"
    };
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
     */
    function init() {
        console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤...");
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (typeof window.editableElementsJson !== "undefined") {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                let elements;
                
                if (typeof window.editableElementsJson === 'string') {
                    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ JSON, —Ä–∞–∑–±–∏—Ä–∞–µ–º –µ—ë
                    elements = JSON.parse(window.editableElementsJson);
                } else if (typeof window.editableElementsJson === 'object') {
                    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç JavaScript, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
                    elements = window.editableElementsJson;
                }
                
                if (elements) {
                    state.editableElements = elements;
                    console.log("‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", elements);
                }
            } catch (e) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", e);
            }
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        applyValuesToElements();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º flatpickr –¥–ª—è –ø–æ–ª–µ–π –¥–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (typeof flatpickr !== "undefined") {
            initDatePickers();
        } else {
            console.warn("‚ö†Ô∏è flatpickr –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞");
        }
        
        console.log("‚úÖ –†–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     * @returns {Object} –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    function getEditableElements() {
        return { 
            elements: state.editableElements,
            unsavedChanges: state.unsavedChanges 
        };
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    function applyValuesToElements() {
        const editableElements = document.querySelectorAll(config.editableSelector);
        
        editableElements.forEach(element => {
            const fieldId = element.getAttribute("data-editable");
            const fieldType = element.getAttribute("data-field-type") || "text";
            
            if (state.editableElements && state.editableElements[fieldId]) {
                const storedValue = state.editableElements[fieldId].value;
                
                if (fieldType === "date") {
                    // –î–ª—è –¥–∞—Ç –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    element.textContent = formatDate(storedValue);
                } else {
                    // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    element.textContent = storedValue;
                }
                
                console.log(`‚úèÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${fieldId}: ${storedValue}`);
            }
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è datepicker –¥–ª—è –ø–æ–ª–µ–π —Å –¥–∞—Ç–∞–º–∏
     */
    function initDatePickers() {
        const dateFields = document.querySelectorAll(`${config.editableSelector}${config.dateFieldSelector}`);
        
        dateFields.forEach(element => {
            const fieldId = element.getAttribute("data-editable");
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ flatpickr
            const options = {
                dateFormat: "d.m.Y",
                locale: "ru",
                allowInput: true,
                disableMobile: false,
                onClose: function(selectedDates, dateStr) {
                    if (dateStr) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
                        element.textContent = dateStr;
                        
                        // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        handleFieldChanged(fieldId, dateStr, "date");
                    }
                }
            };
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º flatpickr
            try {
                const fpInstance = flatpickr(element, options);
                state.datePickerInstances[fieldId] = fpInstance;
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ flatpickr –¥–ª—è ${fieldId}:`, error);
            }
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è
     * @param {string} fieldId - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—è
     * @param {string} value - –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     * @param {string} fieldType - —Ç–∏–ø –ø–æ–ª—è
     */
    function handleFieldChanged(fieldId, value, fieldType) {
        console.log(`üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è ${fieldId}: ${value} (${fieldType})`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (!state.editableElements) {
            state.editableElements = {};
        }
        
        state.editableElements[fieldId] = {
            value: value,
            type: fieldType
        };
        
        state.unsavedChanges = true;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const event = new CustomEvent("template-editor:change", {
            detail: {
                fieldName: fieldId,
                value: value,
                fieldType: fieldType
            }
        });
        
        document.dispatchEvent(event);
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     * @param {string} dateString - —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
     * @returns {string} —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
     */
    function formatDate(dateString) {
        if (!dateString) return "";
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥—è—â–µ–π –¥–∞—Ç—ã
            let date;
            
            if (dateString.includes(".")) {
                // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
                const [day, month, year] = dateString.split(".");
                date = new Date(`${year}-${month}-${day}`);
            } else if (dateString.includes("-")) {
                // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                date = new Date(dateString);
            } else {
                // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ timestamp
                date = new Date(parseInt(dateString));
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            if (isNaN(date)) {
                console.warn(`‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞: ${dateString}`);
                return dateString;
            }
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
            const day = date.getDate().toString().padStart(2, "0");
            const month = (date.getMonth() + 1).toString().padStart(2, "0");
            const year = date.getFullYear();
            
            return `${day}.${month}.${year}`;
        } catch (e) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã ${dateString}:`, e);
            return dateString;
        }
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
     * @param {string} dateString - —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
     * @param {string} fromFormat - –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
     * @param {string} toFormat - —Ü–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
     * @returns {string} –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
     */
    function convertDateFormat(dateString, fromFormat = "DD.MM.YYYY", toFormat = "YYYY-MM-DD") {
        if (!dateString) return "";
        
        try {
            if (fromFormat === "DD.MM.YYYY" && toFormat === "YYYY-MM-DD") {
                const [day, month, year] = dateString.split(".");
                return `${year}-${month}-${day}`;
            } else if (fromFormat === "YYYY-MM-DD" && toFormat === "DD.MM.YYYY") {
                const [year, month, day] = dateString.split("-");
                return `${day}.${month}.${year}`;
            }
            
            return dateString;
        } catch (e) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç—ã ${dateString}:`, e);
            return dateString;
        }
    }
    
    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–µ–∂–¥—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞–º–∏
     */
    function disableElementHandlers() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã flatpickr
        for (const fieldId in state.datePickerInstances) {
            if (state.datePickerInstances[fieldId] && typeof state.datePickerInstances[fieldId].destroy === "function") {
                state.datePickerInstances[fieldId].destroy();
            }
        }
        
        state.datePickerInstances = {};
        console.log("üö´ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω—ã");
    }
    
    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞.
     * –ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
     */
    function saveTemplateData() {
        console.log('–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–µ—Ä–∏–∏
        const seriesModal = document.getElementById('seriesModal');
        if (seriesModal && typeof bootstrap !== 'undefined') {
            console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            if (window.seriesModalInstance) {
                window.seriesModalInstance.show();
            } else {
                window.seriesModalInstance = new bootstrap.Modal(seriesModal);
                window.seriesModalInstance.show();
            }
        } else {
            console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–µ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω –Ω–∞–ø—Ä—è–º—É—é');
            
            // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
            if (window.saveTemplateData && typeof window.saveTemplateData === 'function') {
                window.saveTemplateData();
            }
        }
    }
    
    // CSS –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    const calendarStyles = `
        .simple-calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .simple-calendar-body {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 2px;
        }
        
        .simple-calendar-day {
            padding: 5px;
            text-align: center;
            cursor: pointer;
            border-radius: 4px;
        }
        
        .simple-calendar-day:hover {
            background-color: #f0f0f0;
        }
        
        .simple-calendar-day.active {
            background-color: #007bff;
            color: white;
        }
        
        .simple-calendar-day.other-month {
            color: #ccc;
        }
        
        .simple-calendar-weekday {
            text-align: center;
            font-weight: bold;
            margin-bottom: 5px;
        }
    `;
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
     */
    function addCalendarStyles() {
        const styleElement = document.createElement("style");
        styleElement.textContent = calendarStyles;
        document.head.appendChild(styleElement);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ API
    return {
        init,
        getEditableElements,
        formatDate,
        convertDateFormat,
        onFieldChanged: handleFieldChanged,
        disableElementHandlers,
        hasUnsavedChanges: function() { return state.unsavedChanges; },
        saveTemplateData
    };
})();

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.TemplateEditor = TemplateEditor;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
(function() {
    try {
        if (typeof TemplateEditor !== "undefined" && TemplateEditor.init) {
            TemplateEditor.init();
            console.log("‚úÖ TemplateEditor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ");
        }
    } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TemplateEditor:", e);
    }
})();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
document.addEventListener("DOMContentLoaded", function() {
    if (typeof TemplateEditor !== "undefined" && TemplateEditor.init) {
        TemplateEditor.init();
        console.log("‚úÖ TemplateEditor —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã");
    } else {
        console.error("‚ùå TemplateEditor –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ init");
    }
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    window.addEventListener("beforeunload", function(e) {
        if (TemplateEditor && TemplateEditor.hasUnsavedChanges && TemplateEditor.hasUnsavedChanges()) {
            const message = "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?";
            if (e) {
                e.preventDefault();
                e.returnValue = message;
            }
            return message;
        }
    });
});

