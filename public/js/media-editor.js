// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
const MediaEditor = {
    state: {
        currentFile: null,
        currentFileType: null, // –í—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç 'image'
        imageScale: 1,
        imageX: 0,
        imageY: 0,
        isDragging: false,
        lastTouch: null
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        this.bindEvents();
        this.setupDragAndDrop();
    },

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        const uploadBtn = document.getElementById('uploadBtn');
        const mediaFile = document.getElementById('mediaFile');
        
        if (uploadBtn && mediaFile) {
            uploadBtn.addEventListener('click', () => mediaFile.click());
            mediaFile.addEventListener('change', this.handleFileSelect.bind(this));
        }

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        const saveBtn = document.getElementById('saveBtn');
        const resetBtn = document.getElementById('resetBtn');
        const cancelBtn = document.getElementById('cancelBtn');

        if (saveBtn) saveBtn.addEventListener('click', this.handleSave.bind(this));
        if (resetBtn) resetBtn.addEventListener('click', this.handleReset.bind(this));
        if (cancelBtn) cancelBtn.addEventListener('click', this.handleReset.bind(this));

        // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const saveMediaBtn = document.getElementById('save-media-btn');
        if (saveMediaBtn) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ save-media-btn, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
            saveMediaBtn.addEventListener('click', this.handleSave.bind(this));
        } else {
            console.log('‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ save-media-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
        }

        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const imageViewport = document.getElementById('imageViewport');
        if (imageViewport) {
            this.setupImageEditor(imageViewport);
        }

        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –≤–∏–¥–µ–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop
    setupDragAndDrop() {
        const container = document.querySelector('.media-editor-container');
        if (!container) return;

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            container.addEventListener(eventName, this.preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            container.addEventListener(eventName, this.highlight.bind(this), false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            container.addEventListener(eventName, this.unhighlight.bind(this), false);
        });

        container.addEventListener('drop', this.handleDrop.bind(this), false);
    },

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    },

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ drag
    highlight(e) {
        e.currentTarget.classList.add('highlight');
    },

    // –°–Ω—è—Ç–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    unhighlight(e) {
        e.currentTarget.classList.remove('highlight');
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ drop
    handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        
        if (files.length > 0) {
            this.processFile(files[0]);
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    handleFileSelect(e) {
        const file = e.target.files[0];
        if (file) {
            this.processFile(file);
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
    processFile(file) {
        console.log('üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞:', {
            name: file.name,
            type: file.type,
            size: file.size
        });
        
        if (!this.validateFile(file)) return;

        this.state.currentFile = file;
        this.state.currentFileType = 'image'; // –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        console.log('‚úÖ –§–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω, —Ç–∏–ø:', this.state.currentFileType);

        const reader = new FileReader();
        reader.onload = (e) => {
            console.log('üìñ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä');
            this.showImageEditor(e.target.result);
        };
        reader.readAsDataURL(file);
    },

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    validateFile(file) {
        const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
        const maxSize = 50 * 1024 * 1024; // 50MB

        if (!allowedTypes.includes(file.type)) {
            alert('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, PNG, GIF');
            return false;
        }

        if (file.size > maxSize) {
            alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB');
            return false;
        }

        return true;
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    showImageEditor(imageURL) {
        this.hideSection('uploadSection');
        this.hideSection('videoEditorSection');
        this.showSection('imageEditorSection');
        this.showSection('actionButtons');

        const imagePreview = document.getElementById('imagePreview');
        if (imagePreview) {
            // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
            imagePreview.style.display = 'block';
            imagePreview.style.maxWidth = 'none';
            imagePreview.style.maxHeight = 'none';
            imagePreview.style.position = 'absolute';
            imagePreview.style.opacity = '1';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            imagePreview.src = imageURL;
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            imagePreview.onload = () => {
                // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
                this.resetImageTransform();
                
                // –ó–∞—Ç–µ–º –≤—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 
                // —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞–º viewport
                const viewport = document.getElementById('imageViewport');
                if (viewport) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º viewport –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ Reels –ø–µ—Ä–µ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–æ–≤
                    const viewportRatio = 9/16; // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω Reels (—à–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞)
                    let maxHeight, maxWidth;
                    
                    if (window.innerWidth > 768) {
                        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
                        maxHeight = Math.min(window.innerHeight * 0.8, 800);
                        maxWidth = maxHeight * viewportRatio;
                    } else {
                        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö - –≤—ã—Å–æ—Ç–∞ 80% —ç–∫—Ä–∞–Ω–∞
                        maxHeight = window.innerHeight * 0.8;
                        maxWidth = maxHeight * viewportRatio;
                    }
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫ viewport
                    viewport.style.height = maxHeight + 'px';
                    viewport.style.width = maxWidth + 'px';
                    
                    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã viewport
                    const viewportRect = viewport.getBoundingClientRect();
                    const imgWidth = imagePreview.naturalWidth;
                    const imgHeight = imagePreview.naturalHeight;
                    
                    console.log('üñºÔ∏è –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ viewport:', {
                        imgWidth,
                        imgHeight,
                        viewportWidth: viewportRect.width,
                        viewportHeight: viewportRect.height,
                        viewportRatio
                    });
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    imagePreview.dataset.originalWidth = imgWidth;
                    imagePreview.dataset.originalHeight = imgHeight;
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
                    const imageRatio = imgWidth / imgHeight;
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω viewport
                    const viewportActualRatio = viewportRect.width / viewportRect.height;
                    
                    console.log('üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω:', {
                        imageRatio: imageRatio,
                        viewportRatio: viewportRatio,
                        viewportActualRatio: viewportActualRatio,
                        imgWidth: imgWidth,
                        imgHeight: imgHeight,
                        viewportWidth: viewportRect.width,
                        viewportHeight: viewportRect.height
                    });
                    
                    // –ó–∞–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± —Ç–∞–∫, —á—Ç–æ–±—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω—è–ª–æ viewport –ø–æ–ª–Ω–æ—Å—Ç—å—é
                    // –î–ª—è Reels –≤—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–ª–Ω–∏—Ç viewport –ø–æ –º–µ–Ω—å—à–µ–º—É –∏–∑–º–µ—Ä–µ–Ω–∏—é
                    if (imageRatio > viewportRatio) {
                        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∏—Ä–µ, —á–µ–º viewport 9:16 - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
                        this.state.imageScale = viewportRect.height / imgHeight;
                    } else {
                        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—à–µ, —á–µ–º viewport 9:16 - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
                        this.state.imageScale = viewportRect.width / imgWidth;
                    }
                    
                    console.log('üìè –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–± –¥–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:', this.state.imageScale);
                    
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Å—Ç—ã—Ö –∫—Ä–∞–µ–≤
                    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—à—Ç–∞–±–∞ –Ω–∞ 5% –±–æ–ª—å—à–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
                    this.state.imageScale *= 1.05;
                    
                    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ viewport —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                    // –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞
                    const scaledImgWidth = imgWidth * this.state.imageScale;
                    const scaledImgHeight = imgHeight * this.state.imageScale;
                    
                    // –°–º–µ—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ –≤ —Ü–µ–Ω—Ç—Ä–µ viewport
                    this.state.imageX = (viewportRect.width - scaledImgWidth) / 2;
                    this.state.imageY = (viewportRect.height - scaledImgHeight) / 2;
                    
                    console.log('üéØ –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:', {
                        scaledImgWidth,
                        scaledImgHeight,
                        viewportWidth: viewportRect.width,
                        viewportHeight: viewportRect.height,
                        imageX: this.state.imageX,
                        imageY: this.state.imageY
                    });
                    
                    console.log('üéØ –ù–∞—á–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è:', {
                        scale: this.state.imageScale,
                        x: this.state.imageX,
                        y: this.state.imageY
                    });
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
                    this.updateImageTransform();
                }
            };
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤–∏–¥–µ–æ - –∑–∞–≥–ª—É—à–∫–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω–∞)
    showVideoEditor(videoURL) {
        alert('–í –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–æ—Ä–º–µ –∑–∞–≥—Ä—É–∑–∫–∏
        this.handleReset();
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    setupImageEditor(viewport) {
        let startX, startY, startImageX, startImageY;

        // –ú—ã—à—å
        viewport.addEventListener('mousedown', (e) => {
            this.state.isDragging = true;
            startX = e.clientX;
            startY = e.clientY;
            startImageX = this.state.imageX;
            startImageY = this.state.imageY;
        });

        document.addEventListener('mousemove', (e) => {
            if (!this.state.isDragging) return;
            
            const deltaX = e.clientX - startX;
            const deltaY = e.clientY - startY;
            
            this.state.imageX = startImageX + deltaX;
            this.state.imageY = startImageY + deltaY;
            
            this.updateImageTransform();
        });

        document.addEventListener('mouseup', () => {
            this.state.isDragging = false;
        });

        // –ö–æ–ª–µ—Å–æ –º—ã—à–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        viewport.addEventListener('wheel', (e) => {
            e.preventDefault();
            const delta = e.deltaY > 0 ? 0.9 : 1.1;
            
            // –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞
            const oldScale = this.state.imageScale;
            this.state.imageScale *= delta;
            this.state.imageScale = Math.max(0.1, Math.min(5, this.state.imageScale));
            
            // –ï—Å–ª–∏ –º–∞—Å—à—Ç–∞–± –∏–∑–º–µ–Ω–∏–ª—Å—è, –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (oldScale !== this.state.imageScale) {
                const imagePreview = document.getElementById('imagePreview');
                if (imagePreview && viewport) {
                    const viewportRect = viewport.getBoundingClientRect();
                    const scaledWidth = imagePreview.naturalWidth * this.state.imageScale;
                    const scaledHeight = imagePreview.naturalHeight * this.state.imageScale;
                    
                    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ viewport
                    if (scaledWidth < viewportRect.width) {
                        this.state.imageX = (viewportRect.width - scaledWidth) / 2;
                    }
                    if (scaledHeight < viewportRect.height) {
                        this.state.imageY = (viewportRect.height - scaledHeight) / 2;
                    }
                }
            }
            
            this.updateImageTransform();
        });

        // –°–µ–Ω—Å–æ—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        viewport.addEventListener('touchstart', (e) => {
            if (e.touches.length === 1) {
                this.state.isDragging = true;
                const touch = e.touches[0];
                startX = touch.clientX;
                startY = touch.clientY;
                startImageX = this.state.imageX;
                startImageY = this.state.imageY;
            }
        });

        viewport.addEventListener('touchmove', (e) => {
            e.preventDefault();
            
            if (e.touches.length === 1 && this.state.isDragging) {
                const touch = e.touches[0];
                const deltaX = touch.clientX - startX;
                const deltaY = touch.clientY - startY;
                
                this.state.imageX = startImageX + deltaX;
                this.state.imageY = startImageY + deltaY;
                
                this.updateImageTransform();
            }
        });

        viewport.addEventListener('touchend', () => {
            this.state.isDragging = false;
        });
    },

    // –°–±—Ä–æ—Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    resetImageTransform() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –Ω–∞ 1, –Ω–æ –ø–æ–∑–∏—Ü–∏—é –≤ —Ü–µ–Ω—Ç—Ä viewport
        const imagePreview = document.getElementById('imagePreview');
        const viewport = document.getElementById('imageViewport');
        
        if (imagePreview && viewport) {
            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–Ω–æ
            imagePreview.style.display = 'block';
            imagePreview.style.opacity = '1';
            
            // –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±
            this.state.imageScale = 1;
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const viewportRect = viewport.getBoundingClientRect();
            this.state.imageX = (viewportRect.width - imagePreview.naturalWidth) / 2;
            this.state.imageY = (viewportRect.height - imagePreview.naturalHeight) / 2;
            
            console.log('üîÑ –°–±—Ä–æ—Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:', {
                imageScale: this.state.imageScale,
                imageX: this.state.imageX,
                imageY: this.state.imageY,
                viewportWidth: viewportRect.width,
                viewportHeight: viewportRect.height,
                imageWidth: imagePreview.naturalWidth,
                imageHeight: imagePreview.naturalHeight
            });
        } else {
            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.state.imageScale = 1;
            this.state.imageX = 0;
            this.state.imageY = 0;
        }
        
        this.updateImageTransform();
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ Reels
    updateImageTransform() {
        const imagePreview = document.getElementById('imagePreview');
        const viewport = document.getElementById('imageViewport');
        
        if (imagePreview && viewport) {
            // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è viewport (—à–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞)
            const viewportRatio = 9/16; // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω Reels
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è viewport –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–∫—Ä–∞–Ω–∞
            let maxHeight, maxWidth;
            if (window.innerWidth > 768) {
                // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–æ 80% –æ—Ç –≤—ã—Å–æ—Ç—ã –æ–∫–Ω–∞
                maxHeight = Math.min(window.innerHeight * 0.8, 800);
                maxWidth = maxHeight * viewportRatio;
            } else {
                // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö - –≤—ã—Å–æ—Ç–∞ 80% —ç–∫—Ä–∞–Ω–∞, —à–∏—Ä–∏–Ω–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è
                maxHeight = window.innerHeight * 0.8;
                maxWidth = maxHeight * viewportRatio;
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫ viewport
            viewport.style.height = maxHeight + 'px';
            viewport.style.width = maxWidth + 'px';
            viewport.style.margin = '0 auto';
            viewport.style.overflow = 'hidden'; // –û–±—Ä–µ–∑–∞–µ–º –≤—Å—ë, —á—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
            
            // –í—Å–µ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç Reels (9:16)
            viewport.classList.add('reels-format');
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ viewport –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            imagePreview.style.transformOrigin = '0 0';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –±—ã–ª–∞ –≤–∏–¥–Ω–∞
            const viewportRect = viewport.getBoundingClientRect();
            const imgWidth = imagePreview.naturalWidth * this.state.imageScale;
            const imgHeight = imagePreview.naturalHeight * this.state.imageScale;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ X –∏ Y, —á—Ç–æ–±—ã —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—ã–ª–∞ –≤–∏–¥–Ω–∞
            if (this.state.imageX > viewportRect.width) {
                this.state.imageX = viewportRect.width - 50; // –û—Å—Ç–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã 50px –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–∏–º—ã–º
            } else if (this.state.imageX + imgWidth < 0) {
                this.state.imageX = -imgWidth + 50;
            }
            
            if (this.state.imageY > viewportRect.height) {
                this.state.imageY = viewportRect.height - 50;
            } else if (this.state.imageY + imgHeight < 0) {
                this.state.imageY = -imgHeight + 50;
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª)
            imagePreview.style.transform = `translate(${this.state.imageX.toFixed(2)}px, ${this.state.imageY.toFixed(2)}px) scale(${this.state.imageScale.toFixed(4)})`;
            
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ
            imagePreview.style.display = 'block';
            imagePreview.style.opacity = '1';
            
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:', {
                scale: this.state.imageScale,
                x: this.state.imageX,
                y: this.state.imageY,
                imgWidth,
                imgHeight,
                viewportWidth: viewportRect.width,
                viewportHeight: viewportRect.height
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if (document.querySelector('.crop-info')) {
                document.querySelector('.crop-info').classList.remove('d-none');
                document.getElementById('viewport-size').textContent = `${viewport.clientWidth}√ó${viewport.clientHeight}`;
                document.getElementById('image-size').textContent = `${imagePreview.naturalWidth}√ó${imagePreview.naturalHeight}`;
                document.getElementById('image-scale').textContent = this.state.imageScale.toFixed(2);
                document.getElementById('image-offset').textContent = `X: ${this.state.imageX.toFixed(0)}px, Y: ${this.state.imageY.toFixed(0)}px`;
            }
            
            console.log('üñºÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
                scale: this.state.imageScale,
                x: this.state.imageX,
                y: this.state.imageY,
                viewportWidth: viewport.clientWidth,
                viewportHeight: viewport.clientHeight,
                imageWidth: imagePreview.naturalWidth,
                imageHeight: imagePreview.naturalHeight
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è mobile-friendly –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            const isMobile = window.innerWidth <= 991.98;
            if (isMobile) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏—Ö –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
                const actionButtons = document.getElementById('actionButtons');
                if (actionButtons) {
                    actionButtons.classList.add('mobile-fixed');
                }
            }
            
            // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã viewport –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            viewport.style.border = '2px dashed #f44336';
            viewport.style.borderRadius = '8px';
            viewport.style.boxSizing = 'border-box';
            viewport.style.position = 'relative';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Ä–∞–º–∫–µ –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            const existingHelp = document.getElementById('crop-frame-help');
            if (!existingHelp) {
                const helpText = document.createElement('div');
                helpText.id = 'crop-frame-help';
                helpText.style.position = 'absolute';
                helpText.style.bottom = '10px';
                helpText.style.left = '0';
                helpText.style.right = '0';
                helpText.style.textAlign = 'center';
                helpText.style.backgroundColor = 'rgba(0,0,0,0.5)';
                helpText.style.color = 'white';
                helpText.style.padding = '5px';
                helpText.style.borderRadius = '4px';
                helpText.style.fontSize = '12px';
                helpText.style.zIndex = '999';
                helpText.innerHTML = '–≠—Ç–∞ —Ä–∞–º–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞';
                viewport.appendChild(helpText);
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('üìê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:', {
                imageScale: this.state.imageScale,
                imageX: this.state.imageX,
                imageY: this.state.imageY,
                viewportWidth: viewport.clientWidth,
                viewportHeight: viewport.clientHeight,
                naturalWidth: imagePreview.naturalWidth,
                naturalHeight: imagePreview.naturalHeight
            });
        }
    },

    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ —Ñ—É–Ω–∫—Ü–∏–π
    handleVideoLoaded(e) {
        console.log('–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    },

    setupVideoSliders() {
        // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω
    },

    updateVideoSliders() {
        // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω
    },

    updateTimeDisplay() {
        // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω
        if (endTimeEl) endTimeEl.textContent = this.state.videoEnd.toFixed(1);
        if (durationEl) durationEl.textContent = (this.state.videoEnd - this.state.videoStart).toFixed(1);
    },

    // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    showMessage(message, type = 'info') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingMessage = document.querySelector('.media-editor-message');
        if (existingMessage) {
            existingMessage.remove();
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageEl = document.createElement('div');
        messageEl.className = `media-editor-message alert alert-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'}`;
        messageEl.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 9999;
            min-width: 300px;
            text-align: center;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
            animation: slideDown 0.3s ease-out;
        `;
        messageEl.textContent = message;

        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!document.querySelector('#media-editor-styles')) {
            const styles = document.createElement('style');
            styles.id = 'media-editor-styles';
            styles.textContent = `
                @keyframes slideDown {
                    from { transform: translateX(-50%) translateY(-100%); opacity: 0; }
                    to { transform: translateX(-50%) translateY(0); opacity: 1; }
                }
            `;
            document.head.appendChild(styles);
        }

        document.body.appendChild(messageEl);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (messageEl && messageEl.parentNode) {
                messageEl.remove();
            }
        }, type === 'error' ? 5000 : 3000);
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    async handleSave() {
        console.log('üöÄ MediaEditor.handleSave: –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:', {
            currentFile: this.state.currentFile ? {
                name: this.state.currentFile.name,
                type: this.state.currentFile.type,
                size: this.state.currentFile.size
            } : null,
            currentFileType: this.state.currentFileType
        });
        
        if (!this.state.currentFile) {
            console.error('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            return;
        }

        console.log('üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª:', {
            name: this.state.currentFile.name,
            type: this.state.currentFileType,
            size: this.state.currentFile.size
        });

        this.showProcessing();
        
        // –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        const saveBtn = document.getElementById('saveBtn');
        if (saveBtn) {
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>–û–±—Ä–∞–±–æ—Ç–∫–∞...';
        }

        try {
            const formData = new FormData();
            formData.append('media_file', this.state.currentFile);
            
            console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FormData...');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            {
                // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫—Ä–æ–ø–∞
                const imageViewport = document.getElementById('imageViewport');
                const imagePreview = document.getElementById('imagePreview');
                
                // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω Reels
                const viewportRect = imageViewport ? imageViewport.getBoundingClientRect() : null;
                const imageRect = imagePreview ? imagePreview.getBoundingClientRect() : null;
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ö–æ–ª—Å—Ç–∞
                const currentTransform = imagePreview ? window.getComputedStyle(imagePreview).transform : 'none';
                
                // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ö–æ–ª—Å—Ç–∞ viewport
                const viewportWidth = viewportRect ? viewportRect.width : 0;
                const viewportHeight = viewportRect ? viewportRect.height : 0;
                
                // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const origWidth = imagePreview ? imagePreview.naturalWidth : 0;
                const origHeight = imagePreview ? imagePreview.naturalHeight : 0;
                
                // –í—ã—á–∏—Å–ª—è–µ–º –∫–∞–∫—É—é —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤—ã—Ä–µ–∑–∞—Ç—å, –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–æ–≥–æ —á—Ç–æ –≤–∏–¥–Ω–æ –≤ –æ–∫–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã viewport –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const imgRect = imagePreview.getBoundingClientRect();
                
                // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã viewport –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const viewportToImageCoords = {
                    // –ï—Å–ª–∏ imageX –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, viewport –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–µ–≤–µ–µ –∫—Ä–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    // –ï—Å–ª–∏ imageX –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π, viewport –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–∞–≤–µ–µ –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    left: this.state.imageX < 0 ? Math.abs(this.state.imageX) / this.state.imageScale : 0,
                    top: this.state.imageY < 0 ? Math.abs(this.state.imageY) / this.state.imageScale : 0,
                };
                
                // –†–∞–∑–º–µ—Ä—ã –æ–±–ª–∞—Å—Ç–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                // –î–µ–ª–∏–º —Ä–∞–∑–º–µ—Ä viewport –Ω–∞ –º–∞—Å—à—Ç–∞–±, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                const visibleBox = {
                    left: viewportToImageCoords.left,
                    top: viewportToImageCoords.top,
                    width: viewportWidth / this.state.imageScale,
                    height: viewportHeight / this.state.imageScale
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if (visibleBox.left + visibleBox.width > origWidth) {
                    console.warn('‚ö†Ô∏è –®–∏—Ä–∏–Ω–∞ –æ–±–ª–∞—Å—Ç–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
                        visibleBoxRight: visibleBox.left + visibleBox.width,
                        origWidth
                    });
                }
                
                if (visibleBox.top + visibleBox.height > origHeight) {
                    console.warn('‚ö†Ô∏è –í—ã—Å–æ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
                        visibleBoxBottom: visibleBox.top + visibleBox.height,
                        origHeight
                    });
                }
                
                console.log('üîç –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π –≤–∏–¥–∏–º—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫:', {
                    left: visibleBox.left,
                    top: visibleBox.top,
                    width: visibleBox.width,
                    height: visibleBox.height,
                    imageScale: this.state.imageScale,
                    imageX: this.state.imageX,
                    imageY: this.state.imageY,
                    viewportWidth,
                    viewportHeight,
                    origWidth,
                    origHeight,
                    viewportToImageCoords
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                try {
                    // –†–∏—Å—É–µ–º —Ä–∞–º–∫—É –≤–æ–∫—Ä—É–≥ –∫–∞–¥—Ä–∏—Ä—É–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    let debugElement = document.getElementById('debug-crop-area');
                    if (!debugElement && viewport) {
                        const div = document.createElement('div');
                        div.id = 'debug-crop-area';
                        div.style.position = 'absolute';
                        div.style.border = '2px solid yellow';
                        div.style.pointerEvents = 'none';
                        div.style.zIndex = '1000';
                        viewport.appendChild(div);
                        debugElement = div;
                    }
                    
                    if (debugElement) {
                        const left = this.state.imageX + (viewportToImageCoords.left * this.state.imageScale);
                        const top = this.state.imageY + (viewportToImageCoords.top * this.state.imageScale);
                        const width = visibleBox.width * this.state.imageScale;
                        const height = visibleBox.height * this.state.imageScale;
                        
                        debugElement.style.left = left + 'px';
                        debugElement.style.top = top + 'px';
                        debugElement.style.width = width + 'px';
                        debugElement.style.height = height + 'px';
                    }
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞', e);
                }
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if (visibleBox.left + visibleBox.width > origWidth) {
                    visibleBox.width = origWidth - visibleBox.left;
                }
                if (visibleBox.top + visibleBox.height > origHeight) {
                    visibleBox.height = origHeight - visibleBox.top;
                }
                
                // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
                visibleBox.left = Math.max(0, Math.min(origWidth - 1, visibleBox.left));
                visibleBox.top = Math.max(0, Math.min(origHeight - 1, visibleBox.top));
                visibleBox.width = Math.max(1, Math.min(origWidth - visibleBox.left, visibleBox.width));
                visibleBox.height = Math.max(1, Math.min(origHeight - visibleBox.top, visibleBox.height));
                
                const cropData = {
                    scale: this.state.imageScale,
                    x: this.state.imageX,
                    y: this.state.imageY,
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ —Å—Ç–æ—Ä–æ–Ω –∏ —Ñ–æ—Ä–º–∞—Ç–µ Reels
                    format: 'reels',
                    aspectRatio: '9:16',
                    viewportWidth: viewportWidth,
                    viewportHeight: viewportHeight,
                    imageWidth: imageRect ? imageRect.width : 0,
                    imageHeight: imageRect ? imageRect.height : 0,
                    originalWidth: origWidth,
                    originalHeight: origHeight,
                    // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                    crop: {
                        left: visibleBox.left,
                        top: visibleBox.top,
                        width: visibleBox.width,
                        height: visibleBox.height
                    }
                };
                
                formData.append('crop_data', JSON.stringify(cropData));
                console.log('üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ Reels:', cropData);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º ID —à–∞–±–ª–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            const templateId = document.getElementById('templateId');
            if (templateId) {
                formData.append('template_id', templateId.value);
                console.log('üè∑Ô∏è –î–æ–±–∞–≤–ª–µ–Ω ID —à–∞–±–ª–æ–Ω–∞:', templateId.value);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
            const returnUrl = document.getElementById('returnUrl');
            if (returnUrl) {
                formData.append('return_url', returnUrl.value);
                console.log('üîô –î–æ–±–∞–≤–ª–µ–Ω URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:', returnUrl.value);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
            const csrfToken = document.querySelector('meta[name="csrf-token"]');
            if (!csrfToken) {
                throw new Error('CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
            }
            
            console.log('üîê CSRF —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω');
            console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /media/process...');

            const response = await fetch('/media/process', {
                method: 'POST',
                body: formData,
                headers: {
                    'X-CSRF-TOKEN': csrfToken.getAttribute('content')
                }
            });

            console.log('üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
                status: response.status,
                statusText: response.statusText,
                ok: response.ok
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:', result);

            if (result.success) {
                console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                this.showMessage('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é —à–∞–±–ª–æ–Ω–∞...', 'success');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                if (saveBtn) {
                    saveBtn.innerHTML = '<i class="bi bi-check-circle me-2"></i>–£—Å–ø–µ—à–Ω–æ!';
                    saveBtn.classList.remove('btn-primary');
                    saveBtn.classList.add('btn-success');
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è 
                // (—Å–Ω–∞—á–∞–ª–∞ return_url –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞, –∑–∞—Ç–µ–º returnUrl –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è)
                let redirectUrl = result.return_url || (document.getElementById('returnUrl')?.value);
                
                // –ï—Å–ª–∏ URL –≤—Å—ë –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (!redirectUrl) {
                    redirectUrl = '/templates/create';
                    console.log('üîÑ URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', redirectUrl);
                } else {
                    console.log('üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞:', redirectUrl);
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                setTimeout(() => {
                    console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞:', redirectUrl);
                    window.location.href = redirectUrl;
                }, 1000);
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
            this.showMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message, 'error');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if (saveBtn) {
                saveBtn.disabled = false;
                saveBtn.innerHTML = '<i class="bi bi-check-lg me-2"></i>–î–∞–ª–µ–µ';
                saveBtn.classList.remove('btn-success');
                saveBtn.classList.add('btn-primary');
            }
        } finally {
            this.hideProcessing();
            console.log('üèÅ MediaEditor.handleSave: –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
    },

    // –°–±—Ä–æ—Å
    handleReset() {
        this.state.currentFile = null;
        this.state.currentFileType = null;
        
        this.hideSection('imageEditorSection');
        this.hideSection('videoEditorSection');
        this.hideSection('actionButtons');
        this.showSection('uploadSection');

        // –û—á–∏—Å—Ç–∫–∞ input
        const mediaFile = document.getElementById('mediaFile');
        if (mediaFile) mediaFile.value = '';
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é
    showSection(sectionId) {
        const section = document.getElementById(sectionId);
        if (section) {
            section.style.display = 'block';
        }
    },

    // –°–∫—Ä—ã—Ç—å —Å–µ–∫—Ü–∏—é
    hideSection(sectionId) {
        const section = document.getElementById(sectionId);
        if (section) {
            section.style.display = 'none';
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showProcessing() {
        const indicator = document.getElementById('processingIndicator');
        if (indicator) {
            indicator.style.display = 'block';
        }
    },

    // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    hideProcessing() {
        const indicator = document.getElementById('processingIndicator');
        if (indicator) {
            indicator.style.display = 'none';
        }
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaEditor');
    MediaEditor.init();
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.MediaEditor = MediaEditor;
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é processMedia –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    window.processMedia = function() {
        console.log('üîß processMedia: –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞');
        
        if (window.MediaEditor && typeof window.MediaEditor.handleSave === 'function') {
            console.log('‚úÖ processMedia: MediaEditor –Ω–∞–π–¥–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º handleSave');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º bind –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            return window.MediaEditor.handleSave.call(window.MediaEditor);
        } else {
            console.error('‚ùå processMedia: MediaEditor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ handleSave –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:', {
                MediaEditor: !!window.MediaEditor,
                handleSave: window.MediaEditor ? typeof window.MediaEditor.handleSave : 'MediaEditor –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
            });
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            setTimeout(() => {
                window.location.href = '/template-editor/edit/1';
            }, 300);
            return false;
        }
    };
    
    console.log('‚úÖ MediaEditor —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ');
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.MediaEditor = MediaEditor;
